//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  MANAGER
}

enum SpaceType {
  SHARED_DESK
  PRIVATE_OFFICE
  TEAM_SPACE
  CINEMA
  EVENT_SPACE
}

enum PricingPack {
  FLAT
  STUDENT
  PROFESSIONAL
  APPROVED
}

enum DiscountType {
  NONE
  PERCENTAGE
  FIXED_AMOUNT
}

model Account {
  id                String  @id() @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model User {
  id            String    @id() @default(cuid())
  name          String?
  email         String?   @unique()
  emailVerified DateTime?
  image         String?
  isActive      Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  joinedAt      DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}

/// @@delegate(spaceType)
model Space {
  id                         String         @id() @default(uuid())
  imageUrls                  String[]
  accomodations              String[]
  seatingCapacity            Int?
  pricing                    SpacePricing[]
  spaceType                  SpaceType
  delegate_aux_sharedSpace   SharedSpace?
  delegate_aux_personalSpace PersonalSpace?
  delegate_aux_teamSpace     TeamSpace?
  delegate_aux_cinemaSpace   CinemaSpace?
  delegate_aux_eventsSpace   EventsSpace?
}

model SharedSpace {
  id                 String @id()
  delegate_aux_space Space  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PersonalSpace {
  id                 String @id()
  delegate_aux_space Space  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TeamSpace {
  id                 String   @id()
  equipment          String[]
  delegate_aux_space Space    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CinemaSpace {
  id                 String @id()
  delegate_aux_space Space  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model EventsSpace {
  id                 String @id()
  delegate_aux_space Space  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpacePricing {
  id            String       @id() @default(uuid())
  space         Space        @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId       String
  pack          PricingPack  @default(FLAT)
  price         Int
  timeInterval  Int
  discountType  DiscountType @default(NONE)
  discountValue Int?
}
